// Updated: Fixed exact alignment with LayerToggle by adjusting margins - 2023-06-27

import React from 'react';
import { StyleSheet, View, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { MapControlProps } from '../../../../swap/_app/types/map';

const MapControls: React.FC<MapControlProps> = ({ 
  onZoomIn, 
  onZoomOut, 
  onCurrentLocation,
  style 
}) => {
  // For web, use matchMedia to check for mobile vs desktop
  const isMobile = typeof window !== 'undefined' && window.matchMedia('(max-width: 768px)').matches;
  
  return (
    <View style={[
      styles.container, 
      isMobile ? styles.mobilePosition : styles.desktopPosition,
      style
    ]}>
      {/* Current Location */}
      <TouchableOpacity 
        style={styles.controlButton} 
        onPress={onCurrentLocation}
        accessibilityLabel="Go to your location"
      >
        <Ionicons name="location" size={22} color="#8b14fd" />
      </TouchableOpacity>
      
      {/* Zoom In */}
      <TouchableOpacity 
        style={styles.controlButton} 
        onPress={onZoomIn}
        accessibilityLabel="Zoom in"
      >
        <Ionicons name="add" size={22} color="#555" />
      </TouchableOpacity>
      
      {/* Zoom Out */}
      <TouchableOpacity 
        style={styles.controlButton} 
        onPress={onZoomOut}
        accessibilityLabel="Zoom out"
      >
        <Ionicons name="remove" size={22} color="#555" />
      </TouchableOpacity>
      
      {/* Full-screen/expand - No margin on the last button */}
      <TouchableOpacity 
        style={[styles.controlButton, styles.lastButton]} 
        onPress={() => {
          // Handle fullscreen toggle for web
          if (document.fullscreenElement) {
            document.exitFullscreen().catch(err => {
              console.error('Error exiting fullscreen:', err);
            });
          } else {
            document.documentElement.requestFullscreen().catch(err => {
              console.error('Error requesting fullscreen:', err);
            });
          }
        }}
        accessibilityLabel="Toggle fullscreen"
      >
        <Ionicons name="expand" size={22} color="#555" />
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    zIndex: 10,
    flexDirection: 'column',
    gap: 8,
  },
  desktopPosition: {
    right: 16,
    bottom: 16, // Same level as LayerToggle
  },
  mobilePosition: {
    right: 16,
    bottom: 80, // Same level as LayerToggle with mobile nav
  },
  controlButton: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 8, // This creates the gap between buttons
    // React Native compatible shadow styles
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    // Add a light border for definition
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.05)',
  },
  lastButton: {
    marginBottom: 0, // Remove bottom margin from last button to align with LayerToggle
  }
});

// Add web-specific styles using style attributes directly in the component
if (typeof document !== 'undefined') {
  // This code only runs on web
  const style = document.createElement('style');
  style.textContent = `
    .map-control-button {
      cursor: pointer;
      transition: background-color 0.2s, transform 0.1s;
    }
    .map-control-button:hover {
      background-color: #f8f8f8;
    }
    .map-control-button:active {
      transform: scale(0.95);
    }
  `;
  document.head.appendChild(style);
}

export default React.memo(MapControls); 